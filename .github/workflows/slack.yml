name: branch-name-check

on:
  push:
  create:
  pull_request:
      types: [opened]

jobs:
  docker-steps:
    runs-on: ubuntu-latest
    env: 
      GITHUB_CONTEXT: ${{ toJson(github) }}
      GITHUB_BRANCH: ${{ github.ref_name }}
      GITHUB_REPOSITORY: ${{ github.repository }}
      GITHUB_ACTOR: ${{ github.actor }}
      SLACK_GROUP: ${{ secrets.GA_STANDARDS_SW }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{secrets.GA_STANDARDS_PAT}}
      - name: print branch
        if: github.event_name == 'push'
        shell: python
        run: |
          import os
          branch = os.getenv('GITHUB_BRANCH')
          repository = os.getenv('GITHUB_REPOSITORY')
          actor = os.getenv('GITHUB_ACTOR')
          print (branch)
          print (repository)
          print (actor)
          import subprocess
          status, branches = subprocess.getstatusoutput("git checkout master")
          status, files = subprocess.getstatusoutput("ls -a")
          print (files)
      - name: send a slack Message
        if: github.event_name == 'push'
        shell: python
        run: |
          import os
          import requests
          import json
          import subprocess
          status, x = subprocess.getstatusoutput("git checkout master")

          file_path = 'whitelist_branches.txt'
          whitelisted_branches = []

          def checkWhitelistBranches(branch):
              for i in whitelisted_branches:
                  if (branch==i or branch.startswith(i)):
                      return True
              return False
          
          with open(file_path, 'r') as file:
              for line in file:
                  b = line.strip()
                  whitelisted_branches.append(b)

          branch = os.getenv('GITHUB_BRANCH')
          repository = os.getenv('GITHUB_REPOSITORY')
          actor = os.getenv('GITHUB_ACTOR')
          print (checkWhitelistBranches(branch))
          if not (checkWhitelistBranches(branch)):
              slack_webhook = os.getenv('SLACK_GROUP')
              payload = {
                  'text': 'A new branch named ' + branch + ' is created by ' + actor + ' in the ' + repository + ' repository. This branch does not follow the GitHub Branch naming standards for the Datatools Team. This will get deleted in the next 48 hours. Any PRs from this branch will be blocked and not allowed to merge. Please delete this and create a branch that follows the naming convention. Naming convention - The branch name should start with the Jira ID, or it should be one of the whitelisted names.'
              }
              headers = {
                  'Content-Type': 'application/json'
              }
              requests.post(slack_webhook, data=json.dumps(payload), headers=headers)
      - name: stop pull request
        if: github.event_name == 'push'
        shell: python
        run: |
          import sys
          import subprocess

          file_path = 'whitelist_branches.txt'
          whitelisted_branches = []

          def checkWhitelistBranches(branch):
              for i in whitelisted_branches:
                  if (branch==i or branch.startswith(i)):
                      return True
              return False
          
          status, x = subprocess.getstatusoutput("git checkout master")
          
          with open(file_path, 'r') as file:
          for line in file:
              b = line.strip()
              whitelisted_branches.append(b)
          print (checkWhitelistBranches(branch))
          if not (checkWhitelistBranches(branch)):
            sys.exit(1)